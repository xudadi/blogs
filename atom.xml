<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xudadi.cn</id>
    <title>许大地博客</title>
    <updated>2022-12-09T02:53:19.973Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xudadi.cn"/>
    <link rel="self" href="https://xudadi.cn/atom.xml"/>
    <subtitle>知之为知之，不知为不知，是知也。</subtitle>
    <logo>https://xudadi.cn/images/avatar.png</logo>
    <icon>https://xudadi.cn/favicon.ico</icon>
    <rights>All rights reserved 2022, 许大地博客</rights>
    <entry>
        <title type="html"><![CDATA[考研潮背后：“被学历裹挟”的一代]]></title>
        <id>https://xudadi.cn/post/2022-03-06-kao-yan-chao-bei-hou/</id>
        <link href="https://xudadi.cn/post/2022-03-06-kao-yan-chao-bei-hou/">
        </link>
        <updated>2022-03-06T12:49:51.000Z</updated>
        <summary type="html"><![CDATA[<p>考研临近，在中国人民大学藏书馆的一间朗读室里，马克思、法条、英语，从早到晚，背书声从未停下。</p>
<p>陈婉驻扎在这里已经五个多月了。早上七点半，陈婉轻声从宿舍离开，走路的时候背单词，赶到朗读室占领一个好位置，八点准时开始背诵政治和专业课。中午花二十分钟解决午饭，接着继续学到晚上十点闭馆，无数个这样普通的日子拼凑出她的考研生活。</p>
<p>为了求稳，本科就读于人大的她选择了一所考试难度稍小的211院校。“虽然有点不甘心，但考本校的竞争太大了….不想冒这个险。”</p>
]]></summary>
        <content type="html"><![CDATA[<p>考研临近，在中国人民大学藏书馆的一间朗读室里，马克思、法条、英语，从早到晚，背书声从未停下。</p>
<p>陈婉驻扎在这里已经五个多月了。早上七点半，陈婉轻声从宿舍离开，走路的时候背单词，赶到朗读室占领一个好位置，八点准时开始背诵政治和专业课。中午花二十分钟解决午饭，接着继续学到晚上十点闭馆，无数个这样普通的日子拼凑出她的考研生活。</p>
<p>为了求稳，本科就读于人大的她选择了一所考试难度稍小的211院校。“虽然有点不甘心，但考本校的竞争太大了….不想冒这个险。”</p>
<!-- more -->
<p>她的担忧并非多余，据中国教育在线最新发布的《2021年全国研究生招生调查报告》显示，我国研究生报考规模在不断扩张，竞争愈发激烈。2020年报考人数是341万，2021年是377万，而2022年预计突破400万。可以预见，这样的涨势，未来几年并不会停止。在考生中，一战、二战考生是主力，但也不乏三战或四战的考生。</p>
<p>如此庞大的数字背后，是无数被学历所裹挟的年轻人。考研，成为了观察学历焦虑的一个窗口。</p>
<h2 id="文凭通胀与就业压力">文凭通胀与就业压力</h2>
<p>近四十年来，我国高等教育迅猛发展，在短期内实现了从”精英”阶段向”大众化”阶段的跨越。然而，随着高等教育大众化进程的深入，人们也愈发感受到，高等教育入学机会的增加并没有带给人们预期的教育收益。</p>
<p>这一现象早在1979年就被美国学者兰德尔?柯林斯（Randall Collins）在《文凭社会》一书中称为“文凭通货膨胀”。即获得高等学历的人越来越多，岗位对于学历的要求也水涨船高，学历的价值正在迅速贬值。</p>
<p>根据柯林斯的研究，在美国，高中文凭在1940年之前还相对罕见，但到了70年代，高中学位已是家常便饭。而大学入学率在年轻人中超过了60%，大学学位也面临着如高中学位一样的命运。“过去能够以较低的文凭得到的职位，例如警员，现在要求应聘者拥有本科学历；而想成为警长则需要犯罪学或者刑事司法专业的硕士学位。”</p>
<p>在中国，这种现象也普遍存在。“以前觉得人大本科就业挺好的，但是了解过一些秋招信息后，发现没有硕士学历真的找不到好工作，也开始焦虑起来。”就业压力是陈婉选择考研的主要原因之一。</p>
<p>在就业市场中，研究生学历不再是“锦上添花”的条件，而是筛选简历时的“入场券”。硕士学历和985背景成为了互联网企业的普遍要求，海外名校博士和核心期刊发表则成为了高校教职的标准，体制内越来越多的岗位也要求报考者具有研究生或博士学历。</p>
<p>疫情的影响，使得就业形势更为严峻。为了不被就业市场所抛弃，不少毕业生只能选择通过考研增加自身砝码。与此同时，个体升学的选择又加剧了学历贬值的程度，迫使所有人陷入学历军备竞赛的怪圈。</p>
<p>尽管学历军备竞赛愈演愈烈，雇主对学历的要求越来越高，但大多数情况下，学生在硕士阶段接受的学术训练却与工作岗位所需的技能并不匹配。一如柯林斯所言：“管理和专业岗位中所需的技能大多是在工作中学到的，而商学院和专业学院之所以要求学生完成漫长的课程，很大程度上是为了提高这些职业的地位，在业内人士与门外汉之间制造社会化的功能。”这愈发森严的高墙无疑造成了高等教育资源的过剩和浪费。实际上，职场要求的并不仅仅是专业硬性技能，还包括领导力、人际沟通等软性技能，学历能够带来的实际作用越来越弱。</p>
<p>在这种情况下，不少考生仍在二战甚至三战的苦海里挣扎，寻求“上岸”的机会。因为他们明白，即使只是一纸文凭，却也是他们改变自身处境的一线希望。然而，现实却更为残酷。</p>
<h2 id="考研是阶层流动的阶梯吗">考研是阶层流动的阶梯吗？</h2>
<p>十年前，人们还在为北大毕业生卖猪肉的新闻感到诧异；而现在，985研究生进卷烟厂、清北博士扎堆街道办等现象已成为屡见不鲜的事实。不得不说，高等教育带来的阶层流动速度变慢了。在社会区隔愈发严重的大背景下，纵然考上研究生，想要过上理想体面的中产生活也并不容易。</p>
<p>法国社会学家皮埃尔?布尔迪厄（Pierre Bourdieu）指出，文凭是可以交换的文化资本，也是社会区隔的象征。在国家控制“提名权”的情况下，社会地位及社会尊严已被预先安排和设计。借助这种支配阶级的“文化专断”和“符号暴力”，文凭差异“引导着社会空间中特定位置上的继承者走向与其前辈相似的社会位置，并拥有适合该位置的一系列社会资源，进而再生产既存的社会等级制”。</p>
<p>在这种情况下，文化资本成为了精英自我复制的助推，以及其他非精英群体向上流动的壁垒。《出身：不平等的选拔与精英的自我复制》一书中有着类似的观点：在美国，同样是顶级学校的学生，精英家庭出身的学生却更容易找到高收入的工作。</p>
<p>在国内，前段时间热议的“小镇做题家”“985废物”等话题也从侧面印证了阶层流动的不易。小镇做题家特指那些“出身小城，埋头苦读，擅长应试，缺乏一定视野和资源的青年学子”。只会做题的小镇人士很难和城市精英家庭出身的学生拥有相同的社会资源，即使进入了一流名校，摆脱了经济上落后的乡土环境，仍面临着因原生家庭的影响而导致的思维局限、社交困惑和职场焦虑等问题，在踏入社会后不得不面对向下流动的风险。</p>
<p>然而，也有人主动选择回到小镇，拒绝被学历裹挟。在知乎一则“你为什么放弃考研？”的问题下，一位名为“狐狸芝芝”的答主坦言道：“研究生学历足以让未来的路平坦很多，所以我们趋之若鹜。但即使考上了研究生，我仍然想回家乡。那座四线的小城，人口稀少，交通闭塞。在我眼里，他乡再好，也并非故乡。”</p>
<h2 id="焦虑制造者庞大的考研辅导市场">焦虑制造者：庞大的考研辅导市场</h2>
<p>考研人数暴涨背后，除了就业压力等因素，更离不开考研辅导机构的推波助澜。百万考研人数，意味着百亿级的考研辅导市场规模。</p>
<p>据智研咨询2020年发布的报告显示，在考研备考过程中，约有31%的学生选择报班复习，支出在6000元以下的学生占比近68%，支出超过10000元以上的学生占比近22%。若每年本科毕业生维持在3%的增长，考研占比维持在2%增速，预计2024年我国考研培训市场规模或超过200亿元。</p>
<p>这笔不菲的报班费用吸引着不少教育机构入局，但如此庞大的市场也催生了诸多行业乱象。虚假宣传、教学质量参差不齐、定价乱、违规经营等问题层出不穷。</p>
<p>“现在准备24年考研还来得及吗”、“不考研的人生没有出路”，贩卖焦虑是考研公众号的惯用伎俩，浏览几行后便是课程信息。所谓名师、“北大”学姐，有的仅仅只培训了三四天；动辄上万元的“保过班”，退费却十足困难，往往成为考生自我安慰的“定心丸”。</p>
<p>除了课程内容，稳定安静的学习空间也是考生的一大需求。从线上的考研直播，到线下的付费自习室、考研寄宿基地，各类售卖空间与氛围的机构应运而生。</p>
<p>艾媒咨询发布的《2021年中国付费自习室行业发展现状与消费趋势调查分析报告》显示，随着防疫措施的稳步推进，2021年付费自习室的用户恢复快速增长趋势，用户规模将超过500万人。</p>
<p>“白噪音式备考”、“考研 18h 不休息直播间”，类似标语泛滥在B站学习直播区；“拼搏一年，以后50年跻身上层社会”，这样的洗脑金句在考研寄宿基地里随处可见。当教育内卷愈演愈烈之时，考研人学习与生活的方方面面都可能成为一门“永恒”生意。相关产业从四面八方伸出触手，将考研人包裹得严严实实、密不透风。</p>
<h2 id="从文凭社会走向能力社会">从“文凭社会”走向“能力社会”</h2>
<p>激增的考研人数为我们敲响了警钟，使得我们正视高等教育体系的内部危机。想要适应高等教育普及化的要求，正确应对疫情后严峻的就业形势，必须褪去高学历光环，关注能力甚于学历，打破精英教育下的文凭崇拜，从文凭社会走向能力社会。</p>
<p>首先，我国研究生教育应加快改革，以社会需求为导向，细化区分“学术型硕士”和“专业型硕士”的课程设置，使之与社会经济结构相适应。</p>
<p>2020年9月，教育部等三部门联合印发《关于加快新时代研究生教育改革发展的意见》。《意见》要求，优化培养类型结构，大力发展专业学位研究生教育。新增硕士学位授予单位原则上只开展专业学位研究生教育，新增硕士学位授权点以专业学位授权点为主。</p>
<p>此外，《2021年全国研究生招生调查报告》显示，近年来，专业硕士研究生招生规模显著增长。自2017年起，专业硕士招生规模始终高于学术学位硕士。2019年硕士研究生招生81.1万人，专硕招生规模达47.4万人，占比为58.5%。2019年专业硕士研究生在校生147.4万人，占比60.4%。</p>
<p>可以预见，发展以实践为导向的专业型硕士是未来的趋势。但是目前不少高校的专业型硕士学位培养还延续着学术型硕士的培养理念和培养标准，缺乏专业学位的“应用性”和“职业性”。如何摆脱学术学位研究生教育的影响，提升专业学位研究生的培养质量，是当下很多高校迫切需要研究和解决的问题。</p>
<p>其次，应重视职业教育发展，强化操作型、专业型人才的培养，有效实行学历与职业相匹配，让需求侧回归于理性与效率。</p>
<p>“十四五”规划和2035年远景目标纲要明确提出，要稳步发展职业本科教育，解决“有技能没学历”这个痛点。目前职业教育面临着社会地位低、资金少的尴尬窘境。为了让高等职业教育更有吸引力，国家曾多次尝试普通高校向应用型本科的转变。然而，各类高职院校却对“升本”充满了热情。一边是市场发展亟需大批高素质技术人才，另一边却是社会对于职教生根深蒂固的歧视和偏见。在这种情况下，更需要破除唯学历的用人导向，以职业教育为手段，加强对专业设置和选择的引导，让职业教育更好地服务国家高端制造业发展。</p>
<p>总而言之，我们要警惕文凭泡沫化背后的人才浪费和教育失衡。一如学者李为民所言：“当代中国高等教育面临的诸多矛盾和困境，与上世纪前半叶美国社会面临的教育困境有着诸多相似之处。它让我们清醒地看到，教育如果迷失了自身的价值追求，当人们为拥有文凭的花环而劳碌奔忙时，我们的社会最终收获的可能是文化的荆棘。”</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[install-hexo]]></title>
        <id>https://xudadi.cn/post/2021-10-18-install-hexo/</id>
        <link href="https://xudadi.cn/post/2021-10-18-install-hexo/">
        </link>
        <updated>2021-10-18T03:39:51.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="环境要求">环境要求</h2>
<p>1.首先安装Nodejs和Git</p>
<p>nodejs 下载地址 https://www.nodejs.org</p>
<p>git 下载地址 https://www.git-scm.com</p>
<p>推荐使用腾讯软件中心下载</p>
<p>Nodejs：https://pc.qq.com/search.html#!keyword=nodejs</p>
<p>Git：https://pc.qq.com/search.html#!keyword=git</p>
<p>安装默认路径就可以了</p>
<p>安装好Nodejs和Git后</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="环境要求">环境要求</h2>
<p>1.首先安装Nodejs和Git</p>
<p>nodejs 下载地址 https://www.nodejs.org</p>
<p>git 下载地址 https://www.git-scm.com</p>
<p>推荐使用腾讯软件中心下载</p>
<p>Nodejs：https://pc.qq.com/search.html#!keyword=nodejs</p>
<p>Git：https://pc.qq.com/search.html#!keyword=git</p>
<p>安装默认路径就可以了</p>
<p>安装好Nodejs和Git后</p>
<!-- more -->
<h2 id="2安装hexo">2.安装Hexo</h2>
<p>在D盘创建一个blog文件夹，或者其他盘都可以</p>
<p>在blog文件夹内，按住shift+鼠标右键，选择在此处打开命令窗口。</p>
<p>输入命令</p>
<pre><code>npm install hexo-cli g
</code></pre>
<p>国内安装可能很慢，修改镜像源，输入命令</p>
<p>1.临时使用</p>
<pre><code>npm --registry https://registry.npm.taobao.org install express
</code></pre>
<p>2.持久使用</p>
<pre><code>npm config set registry https://registry.npm.taobao.org
</code></pre>
<p>配置后可通过下面方式来验证是否成功</p>
<pre><code>npm config get registry 或 npm info express
</code></pre>
<p>3.通过cnpm使用</p>
<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre>
<p>Hexo下载完成后，需要在blog文件夹内初始化Hexo，执行命令</p>
<pre><code>hexo init
</code></pre>
<h2 id="3获取博客主题">3.获取博客主题</h2>
<pre><code>npm install hexo -renderer-scss --save
</code></pre>
<h2 id="4hexo安装swig">4.Hexo安装swig</h2>
<pre><code>npm i hexo-renderer-swig
</code></pre>
<h2 id="5克隆主题">5.克隆主题</h2>
<pre><code>git clone https://gitee.com/xudadi/hexo-theme-even themes/even
</code></pre>
<p>克隆完成后，在/Hexo/themes目录下，可以看到.gitkeep和even 两个文件夹。<br>
我们所要使用的主题都是放在这个目录下，Hexo默认使用的是landscape主题，由于第二步Hexo初始化时主题没有clone成功，所以我们这一步克隆了even主题，接下来会使用even主题进行演示。<br>
想获取更多主题，可在网站：https://hexo.io/themes/ 选择自己喜欢的主题，按照此步的步骤clone下来。</p>
<h2 id="6_configyml进行博客基础配置">6._config.yml进行博客基础配置</h2>
<p>title: 博客名字</p>
<p>subtitle: 标题</p>
<p>description: 描述</p>
<p>keywords: 关键词</p>
<p>author: 作者</p>
<p>language: 语言</p>
<p>timezone: 时区</p>
<h2 id="7在_configyml中配置git">7.在_config.yml中配置Git</h2>
<p>注意空格（type，repo，branch）</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/xudadi/blog.git
  branch: master
</code></pre>
<h2 id="7本地预览博客">7.本地预览博客</h2>
<p>清除缓存</p>
<pre><code>hexo clean
</code></pre>
<p>编译项目，输入命令：</p>
<pre><code>hexo g
</code></pre>
<p>运行项目，输入命令：</p>
<pre><code>hexo s
</code></pre>
<h2 id="8在_configyml中配置博客地址和路径">8.在_config.yml中配置博客地址和路径</h2>
<pre><code>url: https://xudadi.cn/blog/
root: /blog
</code></pre>
<h2 id="9发布到github">9.发布到github</h2>
<p>输入命令,安装自动部署发布工具</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>输入命令,发布博客，首次发布需要在shell中输入账号和密码。</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
</code></pre>
<p>至此，我们的博客就搭建完成啦！！！<br>
在/Hexo/source/_posts目录下就可以写我们的博客啦！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[试卷A4转B4的方法]]></title>
        <id>https://xudadi.cn/post/2019-11-08-a4-to-b4/</id>
        <link href="https://xudadi.cn/post/2019-11-08-a4-to-b4/">
        </link>
        <updated>2019-11-08T03:01:18.000Z</updated>
        <summary type="html"><![CDATA[<p>步骤：<br>
1.将A4的试卷方向调整为“横向”；<br>
2.将纸张的大小设置为“B4”大小；<br>
3.将分栏设置为“两栏”</p>
]]></summary>
        <content type="html"><![CDATA[<p>步骤：<br>
1.将A4的试卷方向调整为“横向”；<br>
2.将纸张的大小设置为“B4”大小；<br>
3.将分栏设置为“两栏”</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自学编程=做无用功？你只说对了一半]]></title>
        <id>https://xudadi.cn/post/2019-11-07-zixuebiancheng-wuyonggong/</id>
        <link href="https://xudadi.cn/post/2019-11-07-zixuebiancheng-wuyonggong/">
        </link>
        <updated>2019-11-07T15:13:18.000Z</updated>
        <summary type="html"><![CDATA[<p>先给你讲个故事，看看你有没有类似的经历。</p>
<p>有一天，你去参加同学聚会，和老友们举杯畅谈，他们告诉你，不学编程就要out 了，从全球趋势来看，编程这把火已经烧了很多年。英国早从 2014 年 9 月起，就规定5-16 岁的学生都必须学习编程，苹果CEO 库克表示全世界各地都应该开设编程课程。</p>
]]></summary>
        <content type="html"><![CDATA[<p>先给你讲个故事，看看你有没有类似的经历。</p>
<p>有一天，你去参加同学聚会，和老友们举杯畅谈，他们告诉你，不学编程就要out 了，从全球趋势来看，编程这把火已经烧了很多年。英国早从 2014 年 9 月起，就规定5-16 岁的学生都必须学习编程，苹果CEO 库克表示全世界各地都应该开设编程课程。</p>
<!-- more -->
<p>回到家中，你辗转反侧，觉得自己跟不上时代潮流，扼腕叹息：“廉颇老矣，尚能饭否？”焦虑之余，你开始疯狂搜索编程，百度、知乎、搜狗，你方唱罢我登场。一顿操作之后，你的嘴里念念有词：“Wow，会编程的人好酷，牛逼，都是大神。”感叹之余，你觉得不能纸上谈兵，临渊羡鱼，不如退而织网。于是乎，你开始了自学编程之路。听人说，算法是编程的核心，学好算法可以一招鲜，吃遍天。别人说在嘴里，你听在心里，马上买了一本《算法导论》，打算死磕算法。你没日没夜的攻读，‘算法基础’那一小章，你鼓捣了大半个月，还是云里来雾里去的。</p>
<p>然而，心高气傲的你是不会屈服于‘算法基础’这只拦路虎的，你开始逛各种论坛，CSDN、博客园、简书、知乎都在你的常逛 list 上。你充分利用一切碎片时间，上地铁刷一下，吃饭时刷一下，睡前刷一下，刷得不亦乐乎，刷不完的果断收藏。等到收藏超过100篇未读的时候，你终于发现收藏=永不再读，这让你沮丧。更让你沮丧的是，你买的那本《算法导论》已经在书架上躺了好久。为了弄懂‘算法基础’，你把《算法导论》打入了冷宫。比这更残酷的是，从你信誓旦旦说要学编程以来，你连一行代码都没敲过，一个程序都没跑起来。</p>
<p>你越来越焦虑，终于有一天，你彻底崩溃了，自怨自艾道：“老子骨子里就是个文科生，赶什么时髦？学什么编程？学来学去老是做无用功有意思吗？安安静静地写文章不好吗？”</p>
<p>写文章的人不一定学不了编程，作家王小波就是中国早期程序员，曾经自己编了一套DOS下的独立输入法。真正阻止你学编程的也不是深奥的算法，而是你错误的学习方法。自学编程不等于做无用功，盲目、焦虑地自学才是。读到这里，你肯定满脸疑惑：“我到底哪里做错了？”</p>
<p>首先，自学的初衷不是焦虑、盲目，而是解决问题。李小龙当年刚回香港，在《欢乐今宵》上节目，节目组请来了一名拳师，想考验他能不能推到对方。拳师也摆好架子等他来推，结果李小龙一拳打在对方脸上。李小龙想表达的是：在真实的实战中，没有人会等你摆好架势，只冲着你规定的地方打过来。学习也是同样的道理。在真实生活中，环境和知识都一直在动态变化中，你不可能像学校里一样，系统的学好、学完一门知识，然后坐在教室等着不超纲的考试。大部分时间，生活会先给你一个考试，然后你根据问题，自己找出关键词，开始学习。所以，学习的起点不是某人在酒桌上蜻蜓点水的一句话，也不是某人在朋友圈晒的一本书、推荐的一篇微信文章、更不是这个行业的一个经典教材引发你的焦虑，而应该是你真实遇到的一个问题。遇到问题，动手写，犯错、改正，再犯错、再改正，这是学编程最重要的过程。</p>
<p>其次，自学尤其是自学编程往往不是线性的。我们从小到大在学校学习，都有一本教科书，往往按着预习、听讲、练习、复习的路径学习，所有的教材也如出一辙：每个章节所涉及的知识点之间，全都是线性关联，第一章学好了，才有基础学第二章。而社会的知识结构不仅不是这样的，而且几乎全都不是这样的。工作中、生活里充满了各式各样的“提前引用”，即想要理解当前的知识点，需要依赖你未来才能理解的某个或某些知识点。如果还是按照校园时代的线性思维来学习的话，很有可能就像故事中的主人公一样，最终学不下去。拿编程来说，动不动啃《算法导论》的人，要不是有很深厚的数学基础，肯定吃不消。生活很少教我们按部就班，它给我们的测试往往是超纲的，这就要求我们不断更新和迭代。互联网的发展给我们带来的最大启发就是迭代，从门户到搜索，从搜索到移动互联，从简单的网页交互，到如今热闹的小视频社交，技术和生态一直在更新和迭代。同样，自学也是一个不断更新和迭代的过程。编程是一门活到老、学到老的手艺，有些很抽象的概念，一开始看不懂没关系，先脑子里有个大概的印象，然后依葫芦画瓢写几段代码，自己动手实践，写完之后再总结、归纳、整理、组织相关的知识点，实战经验多了，再回头来看最初的难点，你自然能够豁然开朗。比如说python 中的return，很多初学python 的人，对return 疑惑不已，字面上是返回，那它到底返回什么，又返回到哪里呢？有人可能会给你解释：“return 语句就是将结果返回到调用的地方，并把程序控制权一起返回。”对于初学者来说，这个解释也不好理解。没事，先实践起来。</p>
<p>拿下面这四行代码来说，你可以想象你开了一家工厂，雇佣工人来干活，这个工人（worker）在你的指导下，用a、b、 c 三个材料，装配出了x 和 y 两个成品。但是程序里的装配和工厂不同，用过的材料不会消失。这样，这个工人手里就有了a、b、c、x、y五样物品。他怎么知道你要的是哪个呢？所以return 的作用就是，在这种时候告诉工人你到底想要什么东西，是一个iPhone 手机壳还是整台iPhone。毫无疑问，return x 和return y 是完全不一样的结果。return x 是当你让这个工人帮你干活时（调用函数），他最后会把产成品x交到你手上，而当你输入return y 的时候，干活的工人会把产成品y 给你。举个例子，worker（1,2,3），return x 的结果为1+2=3，return y 的结果为（1+2）*3=9。这样实践一下，你对于return是不是有了更深的理解？</p>
<p>def worker（a,b, c）：</p>
<p>x = a + b</p>
<p>y = x * c</p>
<p>return y</p>
<p>看完我的分析，蓦然回首，你是不是觉得道路明朗了许多，你肯定很想问：怎样自学才高效呢？</p>
<p>在自学过程中，有个方法特别管用，就是用输出倒逼输入，你逛论坛、刷文章、看视频教程都没问题，关键是要有输出，光有输入可是不行的。而最好的输出就是实践，把自己听到的、看到的、读到的，转化为你独立编写的一个个程序，岂不妙哉？</p>
<p>文章开头故事里的主人公就陷入了盲目输入，却无输出的泥潭。他的输入表面上看上去渠道很多元化，然而这些输入并没有带来有效的输出。还有一个很多人都不知道的点，你的输入很有可能是制约你进步的紧箍咒。输入也是有讲究的，盲目输入会带来信息超载。全世界每天有 4000 本书出版，超过 4 亿个字；纽约时报一天的文字量等于牛顿同时代的人一生的阅读量；一个专业领域，每天大概有有近4000篇文章正在产生。就算你火力全开，疯狂地输入相关知识，也还是难免有漏网之鱼。而且，在茫茫的信息汪洋中，信息质量参差不齐，保不准你输入的就是一些边角料，反而让你裹足不前。这儿分享桥水（全球著名对冲基金）创始人瑞。达利欧在《原则》一书中阐述的观点：“正确的决策很多时候需要依赖可信度加权。”学习同样也需要可信度加权，不是所有的资料都全盘接收，而是有选择的相信，用老祖宗的话来说，要取其精华，弃其糟粕。信息爆炸时代，最重要的不是增加信息，而是筛选和删除信息。</p>
<p>除此之外，要勇于跳出舒适区，刻意练习。刻意练习这个概念由美国心理学家安德烈。艾莉克森博士提出，即有目的的学习，指的是把要学习的内容分成有针对性的小块，对每个小块进行重复练习。在武术训练中，非常强调分解练习。首先你要把整套动作过一遍，看教练是怎么做的。然后把它分解为多个动作，每个动作分解为多个步骤，一个一个地练习。在这种训练中，动作一定要慢，只有慢下来才能感知动作的内部结构，注意到自己的错误。画家要采风、棋手要打谱、律师要学习案例、政客要读历史、科学家要看论文、马拉松运动员每周至少要累计150公里的跑量。大部分的学习都不是一蹴而就的，往往是练习-反馈-练习-反馈-练习-反馈-学成。刻意练习的关键是随时获得有效的反馈。拿自学编程来说，这是一个很容易获得反馈的领域，当你写的程序跑不起来时，意味着你要 debug，你得把你写的代码分成一小段一小段，逐句检查，直到找出 bug。</p>
<p>当然，鼓吹刻苦的鸡汤想必大家都喝腻了。事实是，很多人即使整天坐在书桌前埋头苦学，时长达到甚至远超学霸，实际效果却远远达不到学霸的水平。问题的关键在于你的思维和学习方法，在于你的学习时间是否得到了高效利用，是否能通过高效学习把知识转化为你真正的实力。只是如果你注意力涣散，身在书桌前，神游天地间；如果你好不容易学完了，转眼又忘得一干二净；如果你写了很多代码却不会举一反三，同一个知识点换了个问法又被难住了；如果你对于你所学习的领域缺乏好奇心和探索精神，只是当一天和尚，敲一天钟，没有刻意练习。那么，花费再多的时间，又有什么成效呢？</p>
<p>扪心自问一下，你上一次坐下来长时间专注于学习，是什么时候呢？似乎这件事变得越来越难以做到，因为我们的生活已经有太多的干扰：必须要点的微博、朋友圈点赞、支付宝蚂蚁森林收能量……诱惑源源不断，切割了我们在学习上的很多可能性。我们接受了太多无效输入，自然也不会产生高效的输出。读到这，你可能又要问我了：“该怎么办才好呢？”</p>
<p>比起一味地延长学习时间，更‘刻意’地学习更重要。学习从来都不是一个阶段的事，更不是一件轻松的事，但是我们可以优化我们的学习路径，比如给自己创造一个干扰项少的学习环境。拿自学编程来说，你需要的就是一台电脑。在学习的时候，你最好离手机远一点，并关掉电脑版微信、QQ和一些乱七八糟的应用。你可能会有疑惑：“那遇到问题向谁请教？”</p>
<p>在这里，我向大家安利Press.one 开发的学习平台——XUE.cn，这是基于 Jupyter Lab 技术深度定制的可交互学习环境，无需单独安装任何软件，打开网页就可以边学边写，即时运行代码得出结果；上手书籍《自学是门手艺》原本就是终身学习达人所著，一边教编程一边教自学，让你得到了鱼，还得到了渔；你还可以在浏览器的阅读界面与代码的作者作者的代码互动，哪里不理解问哪里自己动手试一试；每章还有配套练习以及学习攻略，习题让你及时获得学习反馈，巩固知识点，攻略提供难度、时间、自学小贴士等，让你从容安排学习计划，轻松上手学习；最后，也最能抓我的，XUE.cn上再牛的达人都是业余自学而成，形成了开放包容的学习氛围，新手小白在这里可以轻松无压力地发起讨论和求助。</p>
<p>defTeachYourSelf（anything）：</p>
<p>while not create（something）：</p>
<p>learn（）</p>
<p>practice（）</p>
<p>return TeachYourSelf（another）</p>
<p>TeachYourSelf（coding）</p>
<p>上面这段代码是Xue.cn 写给大家的几行代码，基于python 的任何交互环境都可以运行。当然，如果你不想安装python 运行环境，也没问题。你只需要打开Xue.cn，不需要安装任何程序，你也可以随时随地写代码。</p>
<p>文章来源：月光博客https://www.williamlong.info/archives/5870.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://xudadi.cn/post/2019-10-27-hello-world/</id>
        <link href="https://xudadi.cn/post/2019-10-27-hello-world/">
        </link>
        <updated>2019-11-07T06:41:21.000Z</updated>
        <summary type="html"><![CDATA[<p>{::nomarkdown}</p>
<center>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=863481092&auto=0&height=66">
</iframe>
</center>
{:/nomarkdown}
]]></summary>
        <content type="html"><![CDATA[<p>{::nomarkdown}</p>
<center>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=863481092&auto=0&height=66">
</iframe>
</center>
{:/nomarkdown}
<!-- more -->
<p>Hello World</p>
<p>未完待续...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于explorer.exe报错的问题]]></title>
        <id>https://xudadi.cn/post/2019-11-07-exeplorer-error/</id>
        <link href="https://xudadi.cn/post/2019-11-07-exeplorer-error/">
        </link>
        <updated>2019-11-07T06:41:21.000Z</updated>
        <summary type="html"><![CDATA[<p>HnShell.dll引起的报错，可以重启按F8进入安全模式，打开控制面板卸载程序，卸载小黑记事本</p>
]]></summary>
        <content type="html"><![CDATA[<p>HnShell.dll引起的报错，可以重启按F8进入安全模式，打开控制面板卸载程序，卸载小黑记事本</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 启动页 (Splash) 的实现]]></title>
        <id>https://xudadi.cn/post/2015-11-18-android-splash/</id>
        <link href="https://xudadi.cn/post/2015-11-18-android-splash/">
        </link>
        <updated>2019-09-19T06:12:32.000Z</updated>
        <summary type="html"><![CDATA[<p>App 启动页 (Splash)，最经典的莫过于微信的启动页了。不过启动页是个好的设计还是不好的设计呢？本文不讨论这个问题，仅从一个开发者的角度来讲解下Android应用启动页的实现，以及一些需要注意的地方。</p>
]]></summary>
        <content type="html"><![CDATA[<p>App 启动页 (Splash)，最经典的莫过于微信的启动页了。不过启动页是个好的设计还是不好的设计呢？本文不讨论这个问题，仅从一个开发者的角度来讲解下Android应用启动页的实现，以及一些需要注意的地方。</p>
<!-- more -->
<h3 id="基本实现">基本实现</h3>
<p>先显示一个界面，停留1~2s，然后跳转到另一个界面。<br>
这里有个延时跳转，可以用 Timer、Handler 实现，我这里用 Handler 来实现。</p>
<h4 id="1-添加-splashactivity">1. 添加 <code>SplashActivity</code></h4>
<p>首先假设 App 打开的第一个界面为 <code>MainActivity</code>，新建一个 <code>SplashActivity</code>，在 <code>AndroidManifest</code> 中将 <code>SplashActivity</code> 设置为启动后第一个打开的页面：</p>
<pre><code class="language-xml">&lt;activity
      	android:name=&quot;.activity.SplashActivity&quot;
      	android:label=&quot;@string/app_name&quot;
      	android:theme=&quot;@style/AppTheme.NoActionBar.FullScreen&quot;&gt;
      	&lt;intent-filter&gt;
            	 	&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
            	 	&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
      	&lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>
<p>这里只是将 <code>MainActivity</code> 的 <code>intent-filter</code> 参数剪切给 <code>SplashActivity</code>，此时你打开 App 第一个显示的就是 <code>SplashActivity</code> 了。</p>
<h4 id="2-添加跳转">2. 添加跳转</h4>
<p>跳转是用 Handler 的 <code>postDelayed()</code> 方法来设置延时来实现的，在 <code>SplashActivity</code> 的 <code>onCreate()</code> 方法中添加一下的代码，就可以实现在1500毫秒后跳转到 <code>MainActivity</code> 了。<br>
这里需要注意的是 <code>Handler</code> 是引用自 <code>android.os.Handler</code>，import 的时候不要搞错了。</p>
<pre><code class="language-java">Handler handler = new Handler();
handler.postDelayed(new Runnable() {
       @Override
       public void run() {
            Intent intent = new Intent(SplashActivity.this, MainActivity.class);
            startActivity(intent);
            finish();
        }
}, 1500);
</code></pre>
<p><code>postDelayed(Runnable r, long delayMillis)</code> 方法就是设置在设定的时间后执行 <code>Runnable</code> 中的 <code>run()</code>，<code>delayMillis</code> 单位是毫秒。</p>
<h3 id="注意的问题">注意的问题</h3>
<p>以上两步操作基本实现了启动页的基本功能，不过还是有一些小的问题需要注意的。</p>
<h4 id="1-只显示一次启动页-app-没被-kill-的情况下">1. 只显示一次启动页（ App 没被 kill 的情况下）</h4>
<p>微信打开之后，按下返回键回到桌面，再打开微信，并不会再看到启动页（除非你手动清了微信的后台或者被系统 kill 了），这个是怎么实现的呢？</p>
<p>其实很简单，只需要重写一下 <code>MainActivity</code> 的 <code>onBackPressed()</code> 方法就行。</p>
<pre><code class="language-java">@Override
public void onBackPressed() {
    // super.onBackPressed(); 	不要调用父类的方法
    Intent intent = new Intent(Intent.ACTION_MAIN);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    intent.addCategory(Intent.CATEGORY_HOME);
    startActivity(intent);
}
</code></pre>
<p>以上就实现了和微信一样的效果。</p>
<h4 id="2-全屏页面切换到非全屏页面的问题">2. 全屏页面切换到非全屏页面的问题</h4>
<p>由于启动页一般是全屏显示的，而主页则不是，因此从全屏切换到非全屏就存在一个卡顿的问题，这个问题我之前在 CSDN 上写过一篇解决办法，这里就直接贴地址了:<br>
<a href="http://blog.csdn.net/u013011318/article/details/48296869">Android 全屏界面切换到非全屏界面的问题</a>。</p>
<p>暂时就写这么多，需要 demo 的话可以看我最新开源的项目<a href="https://github.com/laobie/ListenRain">听雨</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 编码规范]]></title>
        <id>https://xudadi.cn/post/2015-11-02-code-style-guideline-for-android/</id>
        <link href="https://xudadi.cn/post/2015-11-02-code-style-guideline-for-android/">
        </link>
        <updated>2019-09-19T06:12:25.000Z</updated>
        <summary type="html"><![CDATA[<p>在开发中，遵循良好的编码规范，不仅仅可以提高代码的可读性，减小出错的可能性，同时也降低与其他开发者交流的成本，易于他人的维护与协作。<br>
本文简单总结了 Android 开发中的一些代码规范，供开发者参考。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在开发中，遵循良好的编码规范，不仅仅可以提高代码的可读性，减小出错的可能性，同时也降低与其他开发者交流的成本，易于他人的维护与协作。<br>
本文简单总结了 Android 开发中的一些代码规范，供开发者参考。</p>
<!-- more -->
<h3 id="基本要求">基本要求</h3>
<ul>
<li>除了注释，代码中不出现中文</li>
<li>每个类写上必要的注释，类的说明，作者，联系方式</li>
<li>方法加上必要的注释说明，方便以后维护</li>
</ul>
<h3 id="包管理">包管理</h3>
<ol>
<li>base: 存放基础类的包，里面的类以 <code>Base</code> 为前缀，例如 <code>BaseActivity</code>；</li>
<li>activity: 存放 activity 的包，每个 activity 命名以Activity结尾，例如 <code>MainActivity</code>;</li>
<li>fragment: 存放 fragment的包，每个 fragment 命名以 Fragment 结尾，例如 <code>ChatFragment</code>;</li>
<li>receiver: 存放 receiver 的包；</li>
<li>service: 存放 service 的包；</li>
<li>adapter: 存放 adapter 的包，每个 adapter 命名以 Adapter 结尾，例如 <code>EventItemAdapter</code>;</li>
<li>common: 存放一些公共常量，例如后端接口、<code>SharedPreferenceKey</code>、<code>IntentExtra</code> 等;</li>
<li>utils: 存放工具类的包，比如常见的工具类：<code>LogUtils</code>、<code>DateUtils</code>；</li>
<li>entity: 存放实体类的包；</li>
<li>widget: 存放自定义View的包；</li>
</ol>
<p>以上是一些常见的包，但不局限于此，视项目的具体情况而定。</p>
<h3 id="命名">命名</h3>
<p><strong>大驼峰命名 (UpperCamelCase) ：每个单词的第一个字母都大写。</strong></p>
<p><strong>小驼峰命名 (lowerCamelCase) ：除第一个单词以外，每一个单词的第一个字母大写。</strong></p>
<p><strong>命名的基本原则:</strong></p>
<ul>
<li>尽可能地使用统一的命名规范；</li>
<li>不使用汉语拼音；</li>
<li>除了常见的英文缩写，尽量少地使用缩写；</li>
</ul>
<h5 id="1-包命名">1. 包命名</h5>
<ul>
<li>小写字母，参见上文包管理；</li>
<li>连续的单词直接连接起来，不使用下划线；</li>
</ul>
<h5 id="2-java-类命名">2. Java 类命名</h5>
<ul>
<li>大驼峰命名 <code>UserListAdapter</code>；</li>
<li>除常见的缩写单词以外，不使用缩写，缩写的单词每个字母都大写 <code>RequesURLList</code>；</li>
<li>公共的工具类建议以 <code>Utils</code>、 <code>Manager</code> 为后缀，如 <code>LogUtils</code>；</li>
<li>接口命名遵循以上原则，以 <code>able</code> 或 <code>ible</code> 为后缀；</li>
</ul>
<h5 id="3-变量命名">3. 变量命名</h5>
<ul>
<li>成员变量命名
<ul>
<li>小驼峰命名；</li>
<li>不推荐使用谷歌的前面加 m 的编码风格（如果使用团队中使用 m ，则统一使用）；</li>
</ul>
</li>
<li>常量命名
<ul>
<li>单词每个字母均大写；</li>
<li>单词之间下划线连接；</li>
</ul>
</li>
<li>控件变量命名
<ul>
<li>小驼峰命名；</li>
<li>建议使用 <code>控件缩写+逻辑名称</code> 格式，例如 <code>tvPostTitle</code>、<code>etUserName</code>；</li>
<li>对应的控件的 id 的命名<code>控件缩写_逻辑名称</code>，单词均小写，用下划线连接，例如：<code>tv_post_title</code>、<code>et_user_name</code>；</li>
<li>常见的控件缩写如下：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">控件</th>
<th style="text-align:center">缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Linearlayout</td>
<td style="text-align:center">ll</td>
</tr>
<tr>
<td style="text-align:center">RelativeLayout</td>
<td style="text-align:center">rl</td>
</tr>
<tr>
<td style="text-align:center">TextView</td>
<td style="text-align:center">tv</td>
</tr>
<tr>
<td style="text-align:center">EditText</td>
<td style="text-align:center">et</td>
</tr>
<tr>
<td style="text-align:center">Button</td>
<td style="text-align:center">btn</td>
</tr>
<tr>
<td style="text-align:center">ImageView</td>
<td style="text-align:center">iv</td>
</tr>
<tr>
<td style="text-align:center">CheckBox</td>
<td style="text-align:center">chb</td>
</tr>
<tr>
<td style="text-align:center">ListView</td>
<td style="text-align:center">lv</td>
</tr>
<tr>
<td style="text-align:center">GridView</td>
<td style="text-align:center">gv</td>
</tr>
<tr>
<td style="text-align:center">RadioButton</td>
<td style="text-align:center">rb</td>
</tr>
</tbody>
</table>
<h5 id="4-方法命名">4. 方法命名</h5>
<ul>
<li>小驼峰命名；</li>
<li>Getter 和 Setter 方法，推荐使用自动生成的，写起来也很方便。注意，bool 类型的变量 Getter 方法写成 <code>isTrue</code> 这种；</li>
<li>方法名应当保证见名知义的原则，尽量不使用 <code>or</code> 或者 <code>and</code> ，遵循 “do one thing” 原则；</li>
</ul>
<h5 id="5-布局文件命名">5. 布局文件命名</h5>
<ul>
<li>activity、fragment 布局文件名以对应的类别名称为前缀，逻辑名称放在其后，以下划线连接，例如 <code>activity_home</code>、<code>fragment_chat_list</code>，方便查找；</li>
<li>ListView、GridView 的 item 布局文件建议以 <code>list_item</code>、<code>gird_item</code>为前缀，加上对应的逻辑名称，例如 <code>list_item_post</code>、<code>grid_item_photo</code>；</li>
<li>Dialog的布局文件以 <code>dialog</code> 为前缀，逻辑名称放在其后，下划线连接，例如 <code>dialog_warnning</code>;</li>
<li>包含项布局命名以 <code>include</code> 开头，在加上对应的逻辑名称，例如 <code>include_foot</code></li>
<li>控件的 id 命名参见控件变量命名；</li>
</ul>
<h5 id="6-资源命名">6. 资源命名</h5>
<ul>
<li>图标资源以 <code>ic</code> 为前缀，例如 <code>ic_chat</code> ，指聊天图标；</li>
<li>背景图片以 <code>bg</code> 为前缀，例如 <code>bg_login</code> ，指的是登录页的背景图；</li>
<li>按钮图片以 <code>btn</code> 为前缀，例如 <code>btn_login </code>，指的是登录按钮的图片，不过这只有一种状态，需要加上状态的可以在后面添加，例如 <code>btn_login_pressed</code> ，表示登录按钮按下的图片；</li>
<li>当使用 shape 和 selector 文件为背景或者按钮时，命名参照以上说明；</li>
</ul>
<h3 id="参考资料">参考资料</h3>
<p>本文参考了：</p>
<ul>
<li><a href="http://www.androidchina.net/2141.html">最佳实践之Android代码规范</a></li>
<li><a href="http://blog.csdn.net/wwj_748/article/details/42347283">Android研发规范</a></li>
</ul>
<p>推荐阅读：</p>
<ul>
<li><a href="http://codecloud.net/google-java-style-5975.html">Google 的 Java 编程风格指南</a></li>
</ul>
<p>暂时写到这，后面再完善。：）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一个插件：FindViewByMe]]></title>
        <id>https://xudadi.cn/post/2015-11-27-find-view-by-me/</id>
        <link href="https://xudadi.cn/post/2015-11-27-find-view-by-me/">
        </link>
        <updated>2019-09-19T06:12:21.000Z</updated>
        <summary type="html"><![CDATA[<p>FindViewByMe 是一个自动生成 FindViewById 代码的 IDEA/Android Studio 插件，支持 Activity、Fragment 和 ViewHolder 中的 findViewById 的代码生成。</p>
<p>该插件适用于 IntelliJ IDEA 和 Android Studio，以下说明以 Android Studio (简称 AS )为例。</p>
]]></summary>
        <content type="html"><![CDATA[<p>FindViewByMe 是一个自动生成 FindViewById 代码的 IDEA/Android Studio 插件，支持 Activity、Fragment 和 ViewHolder 中的 findViewById 的代码生成。</p>
<p>该插件适用于 IntelliJ IDEA 和 Android Studio，以下说明以 Android Studio (简称 AS )为例。</p>
<!-- more -->
<h4 id="1-下载和安装">1. 下载和安装</h4>
<ul>
<li>
<p>主菜单依次选择 <code>File | Settings</code> ，打开设置对话框，选择 <code>Plugins</code>；</p>
</li>
<li>
<p>搜索框中输入 “findviewbyme” ,点击下面的“Browse”；</p>
<figure data-type="image" tabindex="1"><img src="https://lc-qygvx1cc.cn-n1.lcfile.com/ed9e903a164b3de8.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>在找到的结果中点击 “Install”，然后会提示重启 AS，重启就行了。</p>
<figure data-type="image" tabindex="2"><img src="https://lc-qygvx1cc.cn-n1.lcfile.com/179220e48074f2e4.png" alt="" loading="lazy"></figure>
</li>
</ul>
<h4 id="2-基本使用">2. 基本使用</h4>
<ul>
<li>当你写完一个 layout 文件，在该文件编辑界面任意位置右键，发现菜单中有一个 <code>Find View By Me</code> 的选项；</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://lc-qygvx1cc.cn-n1.lcfile.com/4c8d9c9bc1a997b3.png" alt="" loading="lazy"></figure>
<ul>
<li>点击后会出现 “FindViewByMe” 的对话框，如下所示:</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://lc-qygvx1cc.cn-n1.lcfile.com/fa8259e43ce35445.png" alt="" loading="lazy"></figure>
<ul>
<li>在列表中勾选你需要生成代码的控件，下面就会出现对应的代码；</li>
<li>点击 “Copy Code” 按钮就可以将代码复制到剪切板了，在java文件中粘贴就行了。</li>
</ul>
<h4 id="3-添加-rootview">3. 添加 RootView</h4>
<ul>
<li>针对 Fragment 需要添加 rootView 这种，首先勾选 “Add RootView”；</li>
<li>然后在编辑框中输入 rootView 的名称，例 <code>contentView</code>；</li>
<li>最后点击添加，生成的代码就更新了。</li>
</ul>
<h4 id="4-adapter-中的-viewholder">4. Adapter 中的 ViewHolder</h4>
<ul>
<li>勾选上 “Is ViewHolder” 就行了，代码就更新了；</li>
<li>这里的控件变量不再添加任何修饰符。</li>
<li>一些变量得自行去处理，这里不再赘述。</li>
</ul>
<h4 id="5-几点说明">5. 几点说明</h4>
<ul>
<li>控件变量的命名规则：变量命名是根据控件的id来的，例如 id 是 <code>edit_user_name</code> ，那么生成的变量名称就是 <code>editUserName</code>；</li>
<li>控件变量默认使用 <code>private</code> 修饰符；</li>
<li>关于添加“m”的问题，这个直接在兑换框中勾选 “Add “m”” 就行了，此时变量命名就变成<code>mEditUserName</code>。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[再见，2015]]></title>
        <id>https://xudadi.cn/post/2016-01-31-say-good-bye-to-2015/</id>
        <link href="https://xudadi.cn/post/2016-01-31-say-good-bye-to-2015/">
        </link>
        <updated>2019-09-19T06:12:19.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="引子">引子</h3>
<blockquote>
<p>每一年都会携带着一些愿望和祝福到来，而又带着特有的记忆和故事离开。</p>
<p>去了的就去了，该来的总归要来。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="引子">引子</h3>
<blockquote>
<p>每一年都会携带着一些愿望和祝福到来，而又带着特有的记忆和故事离开。</p>
<p>去了的就去了，该来的总归要来。</p>
</blockquote>
<!-- more -->
<p>上面两句摘自13年元旦那天写的一篇 QQ 空间日志，不知不觉已经过去三年。</p>
<p>三年时间，很多东西都变了。</p>
<p>三年前还在发着中二、矫情状态的 QQ 空间，差不多也快关闭三年了，被彻底地尘封起来。</p>
<p>昨晚女友给我说，我们在一起差不多快一年了。</p>
<p>而三年前写日志的那天，也就是元旦，是和初恋女友在一起过的，不过也是那一年，初恋变成了前女友的。</p>
<p>时间走的还是不紧不慢，生活却变化得越来越快。</p>
<h3 id="过去的一年">过去的一年</h3>
<p>回望过去的时候，我总是试图避免流水帐的叙述方式。可记忆总是顺着时间线，我的尝试恐怕再一次失败。</p>
<h4 id="转行">转行</h4>
<p>到了大四找工作的时候，才知道四年学的专业要找到一份自己满意的工作基本上是不可能了。加上大三暑假在机械公司的实习经历，心里开始承认这个事实——自己并不喜欢这个行业。我喜欢的，恐怕还是互联网行业。</p>
<p>可是去年的这时候，我还在看着 Android 的入门书，还在一家公司当着技术支持的实习生。转行对我来说，充满了未知数。</p>
<p>幸运的是，在年后回到学校之后，面试了几家公司，顺利地拿到了3家公司的实习生 offer。后来去了其中一家公司一直实习到毕业，毕业后也就正式和这家公司签了合同，算是完成了自己年初的转行愿望，成功进入了互联网行业。</p>
<h4 id="毕业">毕业</h4>
<p>毕业其实没什么好说的，不过还是有点小插曲。由于毕业论文第一次评审没通过，被延后到第二批答辩。正好趁中间让我修改论文这段时间，赶在毕业之前回家待了一个星期。后来答辩也算顺利，虽然老师提了不少问题，不过也没太刁难。</p>
<p>后来自己也想了下，由于自己对机械这块基本没了兴趣，毕业设计也确实没花太多时间。连写论文那段时间我都忙里偷闲写点代码。</p>
<p>后来就是毕业，发证书，离校。</p>
<p>告别了学生时代。</p>
<h4 id="爱情">爱情</h4>
<p>和女票的相识是个奇妙的过程，暂不表。</p>
<p>缘分吧~</p>
<p>过去感情的失败，让我一度处在一种说不清楚的状态。时常徘徊在怀疑自己和怀疑世界的状态。</p>
<p>不过遇见了现在的女票，让我知道我还是那个真实的自己，不需要伪装成别人喜欢的样子。</p>
<p>虽然大部分时间都是异地，可是并没觉得累。大抵这就叫合适吧。</p>
<h4 id="离职">离职</h4>
<p>年底的时候，我又做了一个很突然的决定——离职。<br>
其实对我自己来说并不是很突然，外人看来很突然。</p>
<p>因为觉得工作任务并不多，对自己的学习和成长没有太多帮助的原因，加上正好遇到拿到一个较为理想的offer，就萌生了离职的想法。后来就是前东家走流程，12 月份中旬离职，加入新公司。</p>
<p>离职后在家歇了4天，和女票开玩笑说自己成了失业青年了。😂</p>
<p>期间也想了想自己离职的原因：</p>
<ul>
<li>国企的原因，管理层较为复杂，管理上也有很大问题；</li>
<li>老员工工作积极性不高，技术氛围不好；</li>
<li>同组的队友太坑，虽然都是比我工作久，但是合作起来真的很费劲；</li>
<li>工作几年之后，我自己要成为什么样的人？我要处在什么样的状态？</li>
</ul>
<p>特别是最后一条，让我做下了决定。后来流程走完，也没等到年终奖就直接走人了。</p>
<h4 id="量化">量化</h4>
<ul>
<li>发布了“去做” App，累计下载 20k+ ?但是我更新跳票半年了= =</li>
<li>写了个Android Studio插件，昨晚发现不少人在用，并在博客里面推荐了，有点小开心😊</li>
<li>玩了差不多半年多知乎，不过最近已经开始远离了，还是多写代码来的实在</li>
</ul>
<h3 id="结尾">结尾</h3>
<p>这是一篇迟到的总结，主要是一月份真的太忙。最近也感觉自己的状态有点问题，工作一天下来，颈椎酸痛，视力相较以前也开始有点下降了。这就是码农的命吧。</p>
<p>不过，既然选择了这条路，就坚定地走下去吧。</p>
<p>嗯。</p>
<p>PS：麻蛋啊，我今天真的没喝咖啡，大晚上失眠闹哪样啊！！！😔😔😔</p>
]]></content>
    </entry>
</feed>